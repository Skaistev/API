{
	"info": {
		"_postman_id": "532a16a2-39a5-48a3-8699-4aa5cb4786b6",
		"name": "Shop-testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34521176"
	},
	"item": [
		{
			"name": "Items",
			"item": [
				{
					"name": "items get list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is not empty\", () => {\r",
									"\r",
									"    let response = pm.response.json();\r",
									"\r",
									"    pm.expect(response).not.to.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check if response includes 'id'\", () => {\r",
									"   let responseBody = pm.response.json();\r",
									" responseBody.forEach((name)=> {\r",
									"    pm.expect(Object.keys(name).length).to.be.at.least(3);\r",
									"   })\r",
									"});\r",
									"\r",
									"// Test to check if the 'name' field is not empty in the request body\r",
									"pm.test(\"Each product has a non-empty 'name' field\", function () {\r",
									"    pm.response.json().forEach(function(product) {\r",
									"        pm.expect(product.name).to.not.be.empty;\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/shops",
							"host": [
								"{{url}}"
							],
							"path": [
								"shops"
							]
						}
					},
					"response": []
				},
				{
					"name": "Items by id : true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is not empty\", () => {\r",
									"\r",
									"    let response = pm.response.json();\r",
									"\r",
									"    pm.expect(response).not.to.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/shops/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"shops",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Items by id:false",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is empty\", () => {\r",
									"\r",
									"    let response = pm.response.json();\r",
									"\r",
									"    pm.expect(response).to.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/shops/10",
							"host": [
								"{{url}}"
							],
							"path": [
								"shops",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Welcome page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is a string\", () => {\r",
									"    let response = pm.response.json();  \r",
									"    pm.expect(typeof response).to.equal(\"string\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "add item with full info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\",  () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"id is not empty\",  () => {\r",
									"  \r",
									"   let response = pm.response.json();\r",
									"   pm.expect(response.id).to.not.be.undefined;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"name\": \"Venera\", \"address\" :\"gatve.g.11\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/shops",
							"host": [
								"{{url}}"
							],
							"path": [
								"shops"
							]
						}
					},
					"response": []
				},
				{
					"name": "add item with lack of info",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"price\" : \"10\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/shops",
							"host": [
								"{{url}}"
							],
							"path": [
								"shops"
							]
						}
					},
					"response": []
				},
				{
					"name": "add item with too much info",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"name\": \"'Product 1'\", \"price\" : \"10\", \"aha\":\"lalala\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/shops",
							"host": [
								"{{url}}"
							],
							"path": [
								"shops"
							]
						}
					},
					"response": []
				},
				{
					"name": "update item info, id update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Count object keys equal 3\", () => {\r",
									"    let response = pm.response.json(); \r",
									"    let keysCount = Object.keys(response).length;\r",
									"    pm.expect(keysCount).to.equal(3); \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"name\": \"lalala111ff\", \"address\" : \"99cc75\", \"notprice\" : \"9\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/shops/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"shops",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "update item info, change keys",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"name\": \"Merkurijus\", \"address\" : \"Saules g.10\", \"aha\":\"lalala\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/shops/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"shops",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "update item with id not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\",  () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{url}}/shops/9",
							"host": [
								"{{url}}"
							],
							"path": [
								"shops",
								"9"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete item that exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\",  () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"response is empty\",  () => {\r",
									"\r",
									"    let response = pm.response.text();\r",
									"     \r",
									"    expect(response).to.be.empty\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/shops/3",
							"host": [
								"{{url}}"
							],
							"path": [
								"shops",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete item that not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\",  () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/shops/410",
							"host": [
								"{{url}}"
							],
							"path": [
								"shops",
								"410"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": []
		}
	]
}